{
  "0": "dXNlIHRleHRfaW86OnJlYWQ7CgpmbiBtYWluKCkgewogIGxldCBtdXQgbW9kZTogdTMyID0gMDsKICBsZXQgdGVtcDogU3RyaW5nID0gU3RyaW5nOjpmcm9tKCIiKTsKICBsZXQgbXV0IGlzTGVnaXQ6IGJvb2wgPSBmYWxzZTsKICB3aGlsZSBpc0xlZ2l0ID09IGZhbHNlIHsKICAgIHByaW50bG4hKCJlbnRlciBkIHRvIGNvbnZlcnQgZnJvbSBkZWNpbWFsIHRvIG9jdGFsIGFuZCBvIHRvIGNvbnZlcnQgZnJvbSBvY3RhbCB0byBkZWNpbWFsIik7CiAgICBsZXQgdGVtcDogU3RyaW5nID0gcmVhZCEoInt9XG4iKTsKICAgIGlmIHRlbXAgPT0gIm8iIHsKICAgICAgbW9kZSA9IDg7CiAgICAgIGlzTGVnaXQgPSB0cnVlOwogICAgfSBlbHNlIGlmIHRlbXAgPT0gImQiIHsKICAgICAgbW9kZSA9IDEwOwogICAgICBpc0xlZ2l0ID0gdHJ1ZTsKICAgIH0KICB9CiAgcHJpbnRsbiEoImVudGVyIGEgbnVtYmVyLiBwbGVhc2UgZG9uJ3QgZG8gYW55dGhpbmcgd2VpcmQiKTsKICBsZXQgbXV0IG51bVN0cjogU3RyaW5nID0gcmVhZCEoInt9XG4iKTsKICBudW1TdHIgPSBudW1TdHIudHJpbSgpLnRvX3N0cmluZygpOwogIGxldCBtdXQgdmVjID0gVmVjOjpuZXcoKTsKICBsZXQgbXV0IHN0YXJ0ID0gMDsKICBmb3IgeCBpbiAwLi5udW1TdHIubGVuKCkgewogICAgaWYgJm51bVN0clt4Li54ICsgMV0gPT0gIiAiIHsKICAgICAgdmVjLnB1c2goJm51bVN0cltzdGFydC4ueF0pOwogICAgICBzdGFydCA9IHggKyAxOwogICAgfQogIH0KICB2ZWMucHVzaCgmbnVtU3RyW3N0YXJ0Li5udW1TdHIubGVuKCldKTsKICBsZXQgbXV0IHZlYzIgPSBWZWM6Om5ldygpOwogIGZvciB4IGluIHZlYyB7CiAgICBsZXQgbiA9IGkzMjo6ZnJvbV9zdHJfcmFkaXgoeCwgbW9kZSk7CiAgICBpZiBtb2RlID09IDEwIHsKICAgICAgbGV0IG11dCBuID0gbi5vaygpLnVud3JhcCgpOwogICAgICBsZXQgbXV0IG9jdFZlYyA9IFZlYzo6bmV3KCk7CiAgICAgIGxldCBtdXQgaSA9IDA7CiAgICAgIHdoaWxlIG4gIT0gMCB7CiAgICAgICAgb2N0VmVjLnB1c2gobiAlIDgpOwogICAgICAgIG4gPSBuIC8gODsKICAgICAgICBpID0gaSArIDE7CiAgICAgIH0KICAgICAgbGV0IG11dCBuU3RyOiBTdHJpbmcgPSBTdHJpbmc6OmZyb20oIiIpOwogICAgICBsZXQgdGVzdFN0cjogU3RyaW5nID0gKCZvY3RWZWMpLmludG9faXRlcigpLm1hcCh8aXwgaS50b19zdHJpbmcoKSkuY29sbGVjdDo6PFN0cmluZz4oKTsKICAgICAgZm9yIGogaW4gKDAuLmkpLnJldigpIHsKICAgICAgICBuU3RyLnB1c2hfc3RyKG9jdFZlY1tqXS50b19zdHJpbmcoKS5hc19zdHIoKSk7CiAgICAgIH0KICAgICAgdmVjMi5wdXNoKGkzMjo6ZnJvbV9zdHJfcmFkaXgoblN0ci5hc19zdHIoKSwgMTApKTsKICAgIH0gZWxzZSBpZiBtb2RlID09IDggewogICAgICB2ZWMyLnB1c2gobik7CiAgICB9CiAgfQogIGxldCBtdXQgZmluYWxTdHI6IFN0cmluZyA9IFN0cmluZzo6ZnJvbSgiIik7CiAgZm9yIHggaW4gdmVjMiB7CiAgICBpZiB4LmlzX29rKCkgewogICAgICBmaW5hbFN0ci5wdXNoX3N0cigiICIpOwogICAgICBmaW5hbFN0ci5wdXNoX3N0cih4Lm9rKCkudW53cmFwKCkudG9fc3RyaW5nKCkuYXNfc3RyKCkpOwogICAgfQogIH0KICBwcmludGxuISgie30iLCBmaW5hbFN0ci50cmltKCkpCn0K",
  "1": "ICAgICAgYXdhaXQgcGFnZS5nb3RvKCJodHRwczovL2Flcmllc2Nvbm5lY3QuYXVoc2QudXMvQVVDb25uZWN0L1N0dWRlbnRzLmFzcHgiKTsKCiAgICAgIGNvbnNvbGUubG9nKCJiZWZvcmUgd2FpdCBzY2hvb2wiKTsKICAgICAgYXdhaXQgcGFnZS53YWl0Rm9yU2VsZWN0b3IoIiNjdGwwMF9sYmxTY2hvb2xOYW1lIik7CiAgICAgIGNvbnNvbGUubG9nKCJhZnRlciB3YWl0IHNjaG9vbCIpOwogICAgICBsZXQgc2Nob29sRWxlbWVudCA9IGF3YWl0IHBhZ2UuJCgiI2N0bDAwX2xibFNjaG9vbE5hbWUiKTsKICAgICAgbGV0IHNjaG9vbE5hbWUgPSBhd2FpdCBwYWdlLmV2YWx1YXRlKAogICAgICAgIChlbGVtZW50KSA9PiBlbGVtZW50LnRleHRDb250ZW50LAogICAgICAgIHNjaG9vbEVsZW1lbnQKICAgICAgKTsKICAgICAgZGF0YS51c2VySW5mby5zY2hvb2xOYW1lID0gc2Nob29sTmFtZTsKICAgICAgY29uc29sZS5sb2coImJlZm9yZSB3YWl0IGlkIik7CiAgICAgIGF3YWl0IHBhZ2Uud2FpdEZvclNlbGVjdG9yKCIjY3RsMDBfTWFpbkNvbnRlbnRfc3ViU1RVX0RhdGFEZXRhaWxzX2xibElEIik7CiAgICAgIGNvbnNvbGUubG9nKCJhZnRlciB3YWl0IGlkIik7CiAgICAgIGxldCBpZEVsZW1lbnQgPSBhd2FpdCBwYWdlLiQoCiAgICAgICAgIiNjdGwwMF9NYWluQ29udGVudF9zdWJTVFVfRGF0YURldGFpbHNfbGJsSUQiCiAgICAgICk7IC8vIGN0bDAwX01haW5Db250ZW50X3N1YlNUVV9EYXRhRGV0YWlsc19sYmxJRAogICAgICBsZXQgaWQgPSBhd2FpdCBwYWdlLmV2YWx1YXRlKChlbGVtZW50KSA9PiBlbGVtZW50LnRleHRDb250ZW50LCBpZEVsZW1lbnQpOwogICAgICBkYXRhLnVzZXJJbmZvLmlkID0gaWQ7CiAgICAgIGNvbnNvbGUubG9nKCJiZWZvcmUgd2FpdCB0YWJsZSIpOwogICAgICAvL2F3YWl0IHBhZ2Uud2FpdEZvclNlbGVjdG9yKCIuRG9TdGF0ZVJlcG9ydGluZ0hpZ2hsaWdodCIpOwogICAgICBhd2FpdCB3YWl0KDEwMDApOwogICAgICBjb25zb2xlLmxvZygiYWZ0ZXIgd2FpdCB0YWJsZSIpOwogICAgICBsZXQgaW5mb1RhYmxlRWxlbWVudCA9IGF3YWl0IHBhZ2UuJCQoIi5Eb1N0YXRlUmVwb3J0aW5nSGlnaGxpZ2h0Iik7CiAgICAgIGxldCBsYXN0TmFtZSA9IGF3YWl0IHBhZ2UuZXZhbHVhdGUoCiAgICAgICAgKGVsZW1lbnQpID0+IGVsZW1lbnQudGV4dENvbnRlbnQsCiAgICAgICAgaW5mb1RhYmxlRWxlbWVudFswXQogICAgICApOwogICAgICBsZXQgZmlyc3ROYW1lID0gYXdhaXQgcGFnZS5ldmFsdWF0ZSgKICAgICAgICAoZWxlbWVudCkgPT4gZWxlbWVudC50ZXh0Q29udGVudCwKICAgICAgICBpbmZvVGFibGVFbGVtZW50WzFdCiAgICAgICk7Cg==",
  "2": "bGV0IGV4cHJlc3MgPSByZXF1aXJlKCJleHByZXNzIik7CmxldCBhcHAgPSBleHByZXNzKCk7Ci8vIHRvZG8sIGJhZCBmb3JtYXR0aW5nIGVycm9yIGhhbmRsaW5nLCBtb3ZlIGRhdGFvdXRwdXQgYW5kIG5vdFJlcyB0byBvYmplY3RzCmltcG9ydCB7IHNjcmFwZVVzZXJEYXRhIH0gZnJvbSAiLi9zcmMvY3Jhd2xlci11c2VyaW5mbyI7Cgphc3luYyBmdW5jdGlvbiBzZW5kU3BhY2UoZGF0YU91dHB1dDogYW55LCBub3RSZXMsIGlzRG9uZSkgewogIHNldFRpbWVvdXQoYXN5bmMgZnVuY3Rpb24gKCkgewogICAgY29uc29sZS5sb2coaXNEb25lKQogICAgaWYgKGlzRG9uZS5pc0RvbmUgPT0gdHJ1ZSkgewogICAgICBjb25zb2xlLmxvZygiZW5kIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICgKICAgICAgZGF0YU91dHB1dCA9PSB1bmRlZmluZWQgfHwKICAgICAgZGF0YU91dHB1dCA9PSBudWxsIHx8CiAgICAgIGRhdGFPdXRwdXQuZXJyb3IgPT0gdW5kZWZpbmVkIHx8CiAgICAgIGRhdGFPdXRwdXQuZXJyb3IgPT0gbnVsbAogICAgKSB7CiAgICAgIGF3YWl0IG5vdFJlcy53cml0ZSgiICIpOwogICAgICAvL2F3YWl0IG5vdFJlcy53cml0ZSgiICIpOwogICAgICAvL2F3YWl0IG5vdFJlcy53cml0ZUNvbnRpbnVlKCk7CiAgICAgIC8vYXdhaXQgbm90UmVzLndyaXRlSGVhZCgxMDApOwogICAgICBjb25zb2xlLmxvZygic2VuZGluZyBzcGFjZSIpOwogICAgICBjb25zb2xlLmxvZyhkYXRhT3V0cHV0KTsKICAgICAgc2VuZFNwYWNlKGRhdGFPdXRwdXQsIG5vdFJlcywgaXNEb25lKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybjsKICAgIH0KICB9LCAxNTAwMCk7Cn0KCmFwcC5nZXQoIi91c2VyRGF0YSIsIGFzeW5jIGZ1bmN0aW9uIChyZXEsIHJlcykgewogIGxldCBkYXRhT3V0cHV0ID0ge307CiAgbGV0IGlzRG9uZSA9IHsgaXNEb25lOiBmYWxzZSB9OwogIGF3YWl0IHJlcy53cml0ZUhlYWQoMjAyLCB7ICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIgfSk7CiAgc2VuZFNwYWNlKGRhdGFPdXRwdXQsIHJlcywgaXNEb25lKTsKICBsZXQgdXNlcm5hbWUgPSBhd2FpdCByZXEucXVlcnkudXNlcm5hbWU7CiAgbGV0IHBhc3N3b3JkID0gYXdhaXQgcmVxLnF1ZXJ5LnBhc3N3b3JkOwogIGRhdGFPdXRwdXQgPSBhd2FpdCBzY3JhcGVVc2VyRGF0YSh1c2VybmFtZSwgcGFzc3dvcmQpOwogIGNvbnNvbGUubG9nKGRhdGFPdXRwdXQpOwogIC8vYXdhaXQgcmVzLmpzb24oZGF0YU91dHB1dCk7CiAgaXNEb25lLmlzRG9uZSA9IHRydWU7CiAgYXdhaXQgcmVzLndyaXRlKEpTT04uc3RyaW5naWZ5KGRhdGFPdXRwdXQpKTsKICAvL2F3YWl0IHJlcy53cml0ZUhlYWQoMjAwLCB7ICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIgfSk7CiAgYXdhaXQgcmVzLmVuZCgpOwogIGRhdGFPdXRwdXQgPSB7fTsKfSk7CgpsZXQgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgODA4MTsKCnZhciBzZXJ2ZXIgPSBhcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHsKICB2YXIgaG9zdCA9IHNlcnZlci5hZGRyZXNzKCkuYWRkcmVzczsKICB2YXIgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDsKICBjb25zb2xlLmxvZygic2NyYXBlciBsaXN0ZW5pbmcgYXQgaHR0cDovLyVzOiVzIiwgaG9zdCwgcG9ydCk7Cn0pOwo=",
  "3": "ICAgIHdoaWxlIChpbWFnZSA9PSB1bmRlZmluZWQpIHsKICAgICAgYXdhaXQgd2FpdCgyMDApOwogICAgfQoKICAgIGxldCB0ZW1wOiBhbnk7CiAgICAvL0B0cy1pZ25vcmUKICAgIGlmIChpbWFnZS51cmkgPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiB7fTsKICAgIH0KICAgIC8vIEB0cy1pZ25vcmUKICAgIHRlbXAgPSBpbWFnZS51cmk7CiAgICB0ZW1wID0gYXdhaXQgSW1hZ2VNYW5pcHVsYXRvci5tYW5pcHVsYXRlQXN5bmMoCiAgICAgIHRlbXAsCiAgICAgIFt7IHJlc2l6ZTogeyB3aWR0aDogNTEyLCBoZWlnaHQ6IDUxMiB9IH1dLAogICAgICB7IGNvbXByZXNzOiAwLjMsIGJhc2U2NDogdHJ1ZSwgZm9ybWF0OiBJbWFnZU1hbmlwdWxhdG9yLlNhdmVGb3JtYXQuSlBFRyB9CiAgICApOwogICAgbGV0IHRlbXA2NCA9ICJkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCIgKyB0ZW1wLmJhc2U2NDsKICAgIHRoaXMucHJvcHMuc2VuZEltYWdlKHsgdXJpOiB0ZW1wLCBiYXNlNjQ6IHRlbXA2NCB9KTsKICAgIHJldHVybiB7IHVyaTogdGVtcCwgYmFzZTY0OiB0ZW1wNjQgfTsKICB9CgogIGFzeW5jIGhhbmRsZUJ1dHRvblByZXNzMihjdXJyZW50SW1hZ2U6IHN0cmluZykgewogICAgbGV0IHBlcm1zID0gYXdhaXQgZ2V0Q2FtZXJhUGVybXMoKTsKICAgIGlmIChwZXJtcyA9PSBmYWxzZSkgewogICAgICBhbGVydCgKICAgICAgICAiUGxlYXNlIGFsbG93IHBlcm1pc3Npb25zIHRvIHlvdXIgY2FtZXJhIGFuZCBnYWxsZXJ5IHRvIHBpY2sgYW4gaW1hZ2UuIgogICAgICApOwogICAgICByZXR1cm4ge2Jhc2U2NDogIiJ9OwogICAgfQogICAgbGV0IGltYWdlOiBvYmplY3QgfCBudWxsOwogICAgbGV0IHRlbXA6IGFueTsKICAgIEFsZXJ0LmFsZXJ0KCJTZWxlY3QgSW1hZ2UiLCAiIiwgWwogICAgICB7CiAgICAgICAgdGV4dDogIkNhbmNlbCIsCiAgICAgICAgc3R5bGU6ICJjYW5jZWwiLAogICAgICAgIG9uUHJlc3M6ICgpID0+IHt0ZW1wID0ge2Jhc2U2NDogY3VycmVudEltYWdlfTsgfQogICAgICB9LAogICAgICB7CiAgICAgICAgdGV4dDogIlJlbW92ZSBJbWFnZSIsCiAgICAgICAgb25QcmVzczogYXN5bmMgKCkgPT4gewogICAgICAgICAgaW1hZ2UgPSBudWxsOwogICAgICAgICAgdGhpcy5wcm9wcy5zZW5kSW1hZ2Uoe2Jhc2U2NDogIiJ9KTsKICAgICAgICAgIHRlbXAgPSB7YmFzZTY0OiAiIn07CiAgICAgICAgfSwKICAgICAgfSwKICAgIF0pOwogICAgd2hpbGUgKHRlbXAgPT0gdW5kZWZpbmVkKSB7CiAgICAgIGF3YWl0IHdhaXQoMjAwKTsKICAgIH0KICAgIHJldHVybiB0ZW1wOwogIH0=",
  "4": "LyoKewogIG5hbWUsCiAgbG9jYXRpb24sCiAgZGVzY3JpcHRpb24sCiAgZGF5cywKCn0KLy8qLwoKaW1wb3J0IHsgRGF5IH0gZnJvbSAiLi4vc3RvcmVfb2JqZWN0L3N1YnN0b3JlX29iamVjdHMvc3Vic3RvcmVfcHJvcGVydGllcy9kYXlfY2xhc3MiOwppbXBvcnQgU3RvcmVQcm9wZXJ0aWVzIGZyb20gIi4uL3N0b3JlX29iamVjdC9zdWJzdG9yZV9vYmplY3RzL3N0b3JlX3Byb3BlcnRpZXMiOwppbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICJ1dWlkIjsKaW1wb3J0IGZpcmViYXNlIGZyb20gImZpcmViYXNlIjsKaW1wb3J0IFVzZXJSZWYgZnJvbSAiLi4vc3RvcmVfb2JqZWN0L3N1YnN0b3JlX29iamVjdHMvc3Vic3RvcmVfdXNlcnMvdXNlcl9yZWYiOwppbXBvcnQgUm9sZSBmcm9tICIuLi9zdG9yZV9vYmplY3Qvc3Vic3RvcmVfb2JqZWN0cy9zdWJzdG9yZV9yb2xlcy9yb2xlX2NsYXNzIjsKaW1wb3J0IFN0b3JlUm9sZXMgZnJvbSAiLi4vc3RvcmVfb2JqZWN0L3N1YnN0b3JlX29iamVjdHMvc3RvcmVfcm9sZXMiOwppbXBvcnQgU3RvcmVJbnZlbnRvcnkgZnJvbSAiLi4vc3RvcmVfb2JqZWN0L3N1YnN0b3JlX29iamVjdHMvc3RvcmVfaW52ZW50b3J5IjsKaW1wb3J0IEFuYWx5dGljcyBmcm9tICIuLi9zdG9yZV9vYmplY3Qvc3Vic3RvcmVfb2JqZWN0cy9zdWJzdG9yZV9pbnZlbnRvcnkvYW5hbHl0aWNzX2NsYXNzIjsKaW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gIi4uL3N0b3JlX29iamVjdC9zdWJzdG9yZV9vYmplY3RzL3N1YnN0b3JlX2ludmVudG9yeS9zdWJzdG9yZV9hbmFseXRpY3MvcmVjb21tZW5kYXRpb25fY2xhc3MiOwppbXBvcnQgU3RvcmUgZnJvbSAiLi4vc3RvcmVfb2JqZWN0L3N0b3JlX2NsYXNzIjsKaW1wb3J0IFN0b3JlVXNlcnMgZnJvbSAiLi4vc3RvcmVfb2JqZWN0L3N1YnN0b3JlX29iamVjdHMvc3RvcmVfdXNlcnMiOwppbXBvcnQgeyBBc3luY1N0b3JhZ2UgfSBmcm9tICJyZWFjdC1uYXRpdmUiOwoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHByb3BzOiB7CiAgbmFtZTogc3RyaW5nOwogIGxvY2F0aW9uOiBzdHJpbmc7CiAgZGVzY3JpcHRpb246IHN0cmluZzsKICBkYXlzOiBEYXlbXTsKICBsb2dvOiBzdHJpbmcgfCBudWxsOwp9KSB7CiAgLy8gbWFrZSBzdXJlIHRvIGFkZCBzdG9yZXJlZiB0byB1c2VyIHN0b3JlcyB3aXRoIGZpcmViYXNlIHN0dWZmCiAgbGV0IGxvZ29SZWdleDogUmVnRXhwID0gL15kYXRhOmltYWdlXC8oPzpnaWZ8cG5nfGpwZWd8Ym1wfHdlYnApKD86O2NoYXJzZXQ9dXRmLTgpPztiYXNlNjQsKD86W0EtWmEtejAtOV18WysvXSkrPXswLDJ9L2c7CiAgaWYgKHByb3BzLmxvZ28gIT0gbnVsbCAmJiAhbG9nb1JlZ2V4LnRlc3QocHJvcHMubG9nbykpIHsKICAgIGNvbnNvbGUud2Fybigid2FybmluZzogbG9nbyBpcyBub3QgYW4gaW1hZ2UsIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0Iik7CiAgICBwcm9wcy5sb2dvID0gbnVsbDsKICB9CiAgbGV0IHRlbXBTdG9yZVByb3BlcnRpZXMgPSBuZXcgU3RvcmVQcm9wZXJ0aWVzKAogICAgcHJvcHMubmFtZSwKICAgIHByb3BzLmxvY2F0aW9uLAogICAgcHJvcHMuZGVzY3JpcHRpb24sCiAgICBwcm9wcy5kYXlzLAogICAgcHJvcHMubG9nbwogICk7CiAgbGV0IHV1aWQgPSB1dWlkdjQoKTsKICBsZXQgdXNlciA9IGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcjsKICBpZiAoIXVzZXIgfHwgdXNlciA9PSBudWxsKSB7CiAgICBjb25zb2xlLmVycm9yKCJ3aGF0IHRoZSBoZWNrIG5vIG9uZSBpcyBzaWduZWQgaW4sIGV4aXRpbmciKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHVzZXJVVUlEID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oIkBVc2VyOnV1aWQiKTsKICBpZih1c2VyVVVJRCA9PSB1bmRlZmluZWQgfHwgdXNlclVVSUQgPT0gbnVsbCB8fCB1c2VyVVVJRCA9PSAiIikgewogICAgdXNlclVVSUQgPSAiIjsKICAgIGNvbnNvbGUud2Fybigibm90ZSB0byBzZWxmOiBzYXZlIHVzZXIgdG8gYXN5bmNzdG9yYWdlIChAVXNlcjp1dWlkKSIpOwogIH0KICAvL0B0cy1pZ25vcmUKICBsZXQgb3duZXJVc2VyUmVmID0gbmV3IFVzZXJSZWYodXNlci5lbWFpbCwgWyJvd25lciJdKTsKICBsZXQgdGVtcFVzZXJzID0gbmV3IFN0b3JlVXNlcnMoW293bmVyVXNlclJlZl0pOwogIGxldCB0ZW1wUm9sZXMgPSBuZXcgU3RvcmVSb2xlcyhbbmV3IFJvbGUoIm93bmVyIiwgWyJvd25lciJdKV0pOwogIGxldCB0ZW1wSW52ZW50b3J5ID0gbmV3IFN0b3JlSW52ZW50b3J5KAogICAgW10sCiAgICBuZXcgQW5hbHl0aWNzKFtdLCBuZXcgUmVjb21tZW5kYXRpb24obnVsbCwgW10pKQogICk7CiAgY29uc29sZS5sb2coInRlc3QiKQogIGxldCB0ZW1wU3RvcmUgPSBuZXcgU3RvcmUoCiAgICB1dWlkLAogICAgdGVtcEludmVudG9yeSwKICAgIHRlbXBTdG9yZVByb3BlcnRpZXMsCiAgICB0ZW1wUm9sZXMsCiAgICB0ZW1wVXNlcnMKICApOwogIAogIHJldHVybiB0ZW1wU3RvcmU7Cn0K",
  "5": "Y29uc3QgaG91ciA9IFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiLCAiMTAiLCAiMTEiLCAiMTIiXTsKY29uc3QgbWludXRlOiBzdHJpbmdbXSA9IFtdOwoKZm9yIChsZXQgaSA9IDA7IGkgPCA2MDsgaSsrKSB7CiAgbGV0IHRlbXAgPSAiIiArIGk7CiAgdGVtcCA9IHRlbXAucGFkU3RhcnQoMiwgIjAiKTsKICBtaW51dGUucHVzaCh0ZW1wKTsKfQoKY29uc3QgYW1QbSA9IFsiYW0iLCAicG0iXTsKCmZ1bmN0aW9uIGZpbHRlckRheXMoZGF5czogb2JqZWN0KSB7CiAgbGV0IHRlbXAgPSBbXTsKCiAgZm9yIChsZXQga2V5IGluIGRheXMpIHsKICAgIC8vQHRzLWlnbm9yZQogICAgaWYgKGRheXNba2V5XSA9PSAxKSB7CiAgICAgIHRlbXAucHVzaChrZXkpOwogICAgfQogIH0KCiAgcmV0dXJuIHRlbXA7Cn0KCmV4cG9ydCBjbGFzcyBDcmVhdGVTdG9yZVNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7CiAgY29uc3RydWN0b3IocHJvcHM6IGFueSkgewogICAgc3VwZXIocHJvcHMpOwogICAgdGhpcy5zdGF0ZSA9IHsKICAgICAgbG9nbzogbnVsbCwKICAgICAgbmFtZTogIiIsCiAgICAgIGxvY2F0aW9uOiAiIiwKICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICBkYXlzU2VsZWN0ZWQ6IHsgMDogMCwgMTogMSwgMjogMSwgMzogMSwgNDogMSwgNTogMSwgNjogMCB9LAogICAgfTsKICAgIHRoaXMuZ2V0SW1hZ2UgPSB0aGlzLmdldEltYWdlLmJpbmQodGhpcyk7CiAgICBsZXQgdHlwZXMgPSBbImhvdXIiLCAibWludXRlIiwgImFtUG0iXTsKICAgIGxldCBvQyA9IFsib3BlbmluZyIsICJjbG9zaW5nIl07CiAgICBmb3IgKGxldCB0IGluIHR5cGVzKSB7CiAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgNzsgZCsrKSB7CiAgICAgICAgZm9yIChsZXQgaSBpbiBvQykgewogICAgICAgICAgbGV0IHRlbXA7CiAgICAgICAgICBpZiAob0NbaV0gPT0gIm9wZW5pbmciKSB7CiAgICAgICAgICAgIGlmICh0eXBlc1t0XSA9PSAiaG91ciIpIHsKICAgICAgICAgICAgICB0ZW1wID0gbmV3IEluZGV4UGF0aCgxMSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZXNbdF0gPT0gIm1pbnV0ZSIpIHsKICAgICAgICAgICAgICB0ZW1wID0gbmV3IEluZGV4UGF0aCgwKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlc1t0XSA9PSAiYW1QbSIpIHsKICAgICAgICAgICAgICB0ZW1wID0gbmV3IEluZGV4UGF0aCgwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHR5cGVzW3RdID09ICJob3VyIikgewogICAgICAgICAgICAgIHRlbXAgPSBuZXcgSW5kZXhQYXRoKDEwKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlc1t0XSA9PSAibWludXRlIikgewogICAgICAgICAgICAgIHRlbXAgPSBuZXcgSW5kZXhQYXRoKDU5KTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlc1t0XSA9PSAiYW1QbSIpIHsKICAgICAgICAgICAgICB0ZW1wID0gbmV3IEluZGV4UGF0aCgxKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vQHRzLWlnbm9yZQogICAgICAgICAgdGhpcy5zdGF0ZVt0eXBlc1t0XSArIGQgKyBvQ1tpXSArICJJbmRleCJdID0gdGVtcDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGdldEltYWdlKGltYWdlOiBhbnkpIHsKICAgIGlmIChpbWFnZS5iYXNlNjQgPT0gIiIpIHsKICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvZ286IG51bGwgfSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNldFN0YXRlKHsgbG9nbzogaW1hZ2UuYmFzZTY0IH0pOwogICAgfQogIH0KCiAgc2V0TmFtZShpbnB1dDogc3RyaW5nKSB7CiAgICB0aGlzLnNldFN0YXRlKHsgbmFtZTogaW5wdXQgfSk7CiAgfQoKICBzZXRMb2NhdGlvbihpbnB1dDogc3RyaW5nKSB7CiAgICB0aGlzLnNldFN0YXRlKHsgbG9jYXRpb246IGlucHV0IH0pOwogIH0KCiAgc2V0RGVzY3JpcHRpb24oaW5wdXQ6IHN0cmluZykgewogICAgdGhpcy5zZXRTdGF0ZSh7IGRlc2NyaXB0aW9uOiBpbnB1dCB9KTsKICB9CgogIHNldERheXNTZWxlY3RlZChkYXlzOiBvYmplY3QpIHsKICAgIHRoaXMuc2V0U3RhdGUoeyBkYXlzU2VsZWN0ZWQ6IGRheXMgfSk7CiAgfQoKICBzZXRTZWxlY3QoaW5kZXg6IGFueSwgaXRlbTogYW55LCB1bml0OiBhbnksIG9wZW5pbmdDbG9zaW5nOiBhbnkpIHsKICAgIHRoaXMuc2V0U3RhdGUoeyBbdW5pdCArIGl0ZW0gKyBvcGVuaW5nQ2xvc2luZyArICJJbmRleCJdOiBpbmRleCB9KTsKICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUpOwogIH0K",
  "6": "dXNlIHN0ZDo6aW87CnVzZSBzdGQ6OmNtcDo6T3JkZXJpbmc7CnVzZSByYW5kOjpSbmc7CgpmbiBtYWluKCkgewogICAgcHJpbnRsbiEoIkd1ZXNzIHRoZSBudW1iZXIhIik7CgogICAgbGV0IHNlY3JldF9udW1iZXIgPSByYW5kOjp0aHJlYWRfcm5nKCkuZ2VuX3JhbmdlKDEsIDEwMSk7CgogICAgLy9wcmludGxuISgiVGhlIHNlY3JldCBudW1iZXIgaXM6IHt9Iiwgc2VjcmV0X251bWJlcik7CgogICAgbG9vcCB7CgogICAgICAgIHByaW50bG4hKCJQbGVhc2UgaW5wdXQgeW91ciBndWVzcy4iKTsKCiAgICAgICAgbGV0IG11dCBndWVzcyA9IFN0cmluZzo6bmV3KCk7CgogICAgICAgIGlvOjpzdGRpbigpLnJlYWRfbGluZSgmbXV0IGd1ZXNzKQogICAgICAgICAgICAuZXhwZWN0KCJGYWlsZWQgdG8gcmVhZCBsaW5lIik7CgogICAgICAgIGxldCBndWVzczogdTMyID0gbWF0Y2ggZ3Vlc3MudHJpbSgpLnBhcnNlKCkgewogICAgICAgICAgICBPayhudW0pID0+IG51bSwKICAgICAgICAgICAgRXJyKF8pID0+IGNvbnRpbnVlLAogICAgICAgIH07CgogICAgICAgIHByaW50bG4hKCJZb3UgZ3Vlc3NlZDoge30iLCBndWVzcyk7CgogICAgICAgIG1hdGNoIGd1ZXNzLmNtcCgmc2VjcmV0X251bWJlcikgewogICAgICAgICAgICBPcmRlcmluZzo6TGVzcyA9PiBwcmludGxuISgiVG9vIHNtYWxsISIpLAogICAgICAgICAgICBPcmRlcmluZzo6R3JlYXRlciA9PiBwcmludGxuISgiVG9vIGJpZyEiKSwKICAgICAgICAgICAgT3JkZXJpbmc6OkVxdWFsID0+IHsKICAgICAgICAgICAgICAgIHByaW50bG4hKCJZb3Ugd2luISIpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K",
  "7": "aWYgISBbIC14ICIkKGNvbW1hbmQgLXYgamF2YSkiIF07IHRoZW4KICBlY2hvICdFcnJvcjogamF2YSBpcyBub3QgaW5zdGFsbGVkLiBBYm9ydGluZy4nID4mMgogIGV4aXQgNApmaQoKaWYgWyAkbiAhPSB5IF07IHRoZW4KICBTRVZFTlpfSU5TVEFMTEVEPTEKICBpZiAhIFsgLXggIiQoY29tbWFuZCAtdiA3emEpIiBdOyB0aGVuCiAgICBlY2hvICdXYXJuaW5nOiA3emEgaXMgbm90IGluc3RhbGxlZC4gRmFsbGluZyBiYWNrIHRvIHppcC4nID4mMgogICAgU0VWRU5aX0lOU1RBTExFRD0wCiAgZmkKZmkKaWYgWyAkKGxzIC1yIHwgZ3JlcCBmb3JnZS4qdW5pdmVyc2FsXC5qYXIgfCB3YyAtbCkgPT0gMCBdOyB0aGVuCiAgICBlY2hvICJFcnJvcjogbm8gRm9yZ2UgaW5zdGFuY2VzIGZvdW5kLiBVc2UgLWogdG8gc3BlY2lmeSBhIGphci4iCiAgICBleGl0IDUKICBmaQpURU1QX0ZPUkdFPSIkKGxzIC1yIHwgZ3JlcCBmb3JnZS4qdW5pdmVyc2FsXC5qYXIpIgpGT1JHRT0iJChlY2hvICRURU1QX0ZPUkdFIHwgaGVhZCAtbiAxKSIKCmlmIFsgJGphckxvYyAhPSAiLSIgXTsgdGhlbgogIGlmIFsgJHtqYXJMb2M6IC00fSAhPSAiLmphciIgXTsgdGhlbgogICAgZWNobyAiV2FybmluZzogJGphckxvYyBpcyBub3QgYSBqYXIgZmlsZS4gRmFsbGluZyBiYWNrIHRvIGRlZmF1bHQuIgogIGVsc2UKICAgIEZPUkdFPSRqYXJMb2MKICBmaQpmaQoKUkFNPTQwOTYKCmlmIFsgJG1CICE9ICItIiBdOyB0aGVuCiAgcmU9J15bMC05XSskJwogIGlmICEgW1sgJG1CID1+ICRyZSBdXTsgdGhlbgogICAgZWNobyAiV2FybmluZzogJG1CIGlzIG5vdCBhIG51bWJlci4gRmFsbGluZyBiYWNrIHRvIGRlZmF1bHQuIgogIGVsc2UKICAgIGlmIFskbUIgPCA0MDk2XTsgdGhlbgogICAgICBlY2hvICJXYXJuaW5nOiAkbUIgaXMgYSByZWxhdGl2ZWx5IGxvdyBhbW91bnQgb2YgUkFNLiBDb25zaWRlciBpbmNyZWFzaW5nIHRoZSBhbW91bnQgaWYgcG9zc2libGUuIgogICAgZmkKICAgIFJBTT0kbUIKICBmaQpmaQoKIyBjdHJsK2MgdHJhcHBpbmcgYmFzZWQgb24gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI5NzU0ODY2LzY3NDE0NjQsIGJ5IHJvYmVydCBzaWVtZXIsIHVuZGVyIGNyZWF0aXZlIGNvbW1vbnMgYnktc2EgNC4wIChodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvNC4wLykKCmV4aXRfc3R1ZmYoKSB7CiAgZWNobyAic2VydmVyIHN0b3BwZWQiCgogIENVUlJfVElNRT0iJChkYXRlIC0tcmZjLTMzMzk9c2Vjb25kcykiCiAgaWYgWyAkbiAhPSB5IF07IHRoZW4KICAgIGlmIFsgJFNFVkVOWl9JTlNUQUxMRUQgPT0gMSBdOyB0aGVuCiAgICAgIGVjaG8gJHppcAogICAgICBpZiBbICR6aXAgPT0gbiBdOyB0aGVuCiAgICAgICAgN3phIGEgImJhY2t1cHMvJENVUlJfVElNRS43eiIgd29ybGQgLXIKICAgICAgZWxzZQogICAgICAgIHppcCAiYmFja3Vwcy8kQ1VSUl9USU1FLnppcCIgd29ybGQgLXIKICAgICAgZmkKICAgIGVsc2UKICAgICAgemlwICJiYWNrdXBzLyRDVVJSX1RJTUUuemlwIiB3b3JsZCAtcgogICAgZmkKICBlbHNlCiAgICBlY2hvICJXYXJuaW5nOiBiYWNrdXBzIGFyZSBkaXNhYmxlZC4iCiAgZmkKCiAgaWYgWyAkcyA9PSAieSIgXTsgdGhlbgogICAgZWNobyAiU2F2aW5nIHNldHRpbmdzLi4uIgogICAgcHJpbnRmICIkblxuJG1CXG4kamFyTG9jXG4kemlwIiA+IHN0YXJ0LXNlcnZlci1zZXR0aW5ncy50eHQKICBmaQogIAogIHByaW50ZiAiXG5FeGl0aW5nLi4uIgogIGV4aXQgMAp9Cgp0cmFwICdleGl0X3N0dWZmJyBTSUdJTlQKICAKamF2YSAtWG14IiRSQU0iTSAtWG1zIiRSQU0iTSAtamFyICRGT1JHRSBub2d1aQoKZXhpdF9zdHVmZgo=",
  "8": "ZXhwb3J0IGNsYXNzIEhvbWVTY3JlZW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgewogIHN0YXRlID0gewogICAgaXNWaXNpYmxlOiBmYWxzZQogIH07CgogIGFzeW5jIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSB7CiAgICBhd2FpdCBmZXRjaFByZWZlcmVuY2VzKCk7CiAgfQoKICBzZXRWaXNpYmxlKCkgewogICAgdGhpcy5zZXRTdGF0ZSh7IGlzVmlzaWJsZTogIXRoaXMuc3RhdGUuaXNWaXNpYmxlIH0pOwogIH0KCiAgZ29Ub0NoYXQgPSAoKSA9PiB7CiAgICB0aGlzLnByb3BzLm5hdmlnYXRpb24ubmF2aWdhdGUoIkNoYXRTY3JlZW4iLCB7IG5hbWU6IHVzZXJuYW1lIH0pOwogIH07CgogIGFzeW5jIHNhdmVQcmVmZXJlbmNlcygpIHsKICAgIHRoaXMuc2V0VmlzaWJsZSgpOwogICAgYXdhaXQgd2FpdCg1MDApOwogICAgYXdhaXQgZmlyZWJhc2UKICAgICAgLmRhdGFiYXNlKCkKICAgICAgLnJlZigidXNlcnMvIiArIHNjcnViKHVzZXJuYW1lICsgIi9wcmVmZXJlbmNlcyIpKQogICAgICAuc2V0KHsKICAgICAgICAgIGNoZXN0OiBwcmVmZXJlbmNlc1siY2hlc3QiXSwKICAgICAgICAgIHNob3VsZGVyOiBwcmVmZXJlbmNlc1sic2hvdWxkZXIiXSwKICAgICAgICAgIGJhY2s6IHByZWZlcmVuY2VzWyJiYWNrIl0sCiAgICAgICAgICB0cmljZXBzOiBwcmVmZXJlbmNlc1sidHJpY2VwcyJdLAogICAgICAgICAgYmljZXA6IHByZWZlcmVuY2VzWyJiaWNlcCJdLAogICAgICAgICAgcXVhZHJpY2VwczogcHJlZmVyZW5jZXNbInF1YWRyaWNlcHMiXSwKICAgICAgICAgIGhhbXN0cmluZzogcHJlZmVyZW5jZXNbImhhbXN0cmluZyJdLAogICAgICAgICAgY2FsdmVzOiBwcmVmZXJlbmNlc1siY2FsdmVzIl0sCiAgICAgICAgICBjYXJkaW86IHByZWZlcmVuY2VzWyJjYXJkaW8iXQogICAgICB9KTsKICAgIGNvbnNvbGUubG9nKHByZWZlcmVuY2VzKTsKICAgIGNvbnNvbGUubG9nKHByZWZlcmVuY2VzWyJjYXJkaW8iXSk7CiAgfQoKICByZWNvbW1lbmQoKSB7CiAgICByZWNvbW1lbmRhdGlvbiA9IFJlY29tbWVuZGF0aW9uKCk7CiAgICBjb25zb2xlLmxvZyhyZWNvbW1lbmRhdGlvbik7CiAgICB0aGlzLnByb3BzLm5hdmlnYXRpb24ubmF2aWdhdGUoIlJlY29tbWVuZGF0aW9uU2NyZWVuIik7CiAgfQoKICByZW5kZXIoKSB7CiAgICByZXR1cm4gKAogICAgICA8V2F2ZUJhY2tncm91bmQgY29sb3JzPXtbIiMyMWM1ZjIiLCAiIzAwNThhYiJdfT4KICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmhlYWRlckJveH0+CiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmhlYWRlclRleHR9PgogICAgICAgICAgICB7IldlbGNvbWUsICIgKyB1c2VybmFtZS5zdWJzdHJpbmcoMCwgdXNlcm5hbWUuaW5kZXhPZigiQCIpKSArICIhIn0KICAgICAgICAgIDwvVGV4dD4KICAgICAgICA8L1ZpZXc+CiAgICAgICAgPFF1aWNrTG9nIC8+CiAgICAgICAgPFZpZXcgc3R5bGU9e3sgaGVpZ2h0OiBkZXZpY2VIZWlnaHQgLyAxOCB9fSAvPgogICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuc3ViVGV4dH0+UmVjZW50bHkgbG9nZ2VkOjwvVGV4dD4KICAgICAgICA8Q2Fyb3VzZWxMb2cgLz4KICAgICAgICA8RkFCCiAgICAgICAgICBpY29uPSJjaGF0IgogICAgICAgICAgbGFiZWw9IkNIQVQiCiAgICAgICAgICBzdHlsZT17c3R5bGVzLmZhYn0KICAgICAgICAgIG9uUHJlc3M9eygpID0+IHRoaXMuZ29Ub0NoYXQoKX0KICAgICAgICAvPgogICAgICAgIDxCdXR0b24KICAgICAgICAgIGljb249e3JlbmRlclNldHRpbmdzSWNvbn0KICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc2V0dGluZ3NJY29ufQogICAgICAgICAgb25QcmVzcz17KCkgPT4gdGhpcy5zZXRWaXNpYmxlKCl9CiAgICAgICAgLz4KICAgICAgICA8TW9kYWwKICAgICAgICAgIGJhY2tkcm9wU3R5bGU9e3N0eWxlcy5tb2RhbEJnfQogICAgICAgICAgb25CYWNrZHJvcFByZXNzPXsoKSA9PiB0aGlzLnNhdmVQcmVmZXJlbmNlcygpfQogICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5pc1Zpc2libGV9CiAgICAgICAgICBzdHlsZT17eyBhbGlnblNlbGY6ICJjZW50ZXIiIH19CiAgICAgICAgPgogICAgICAgICAgPFNldHRpbmdzTW9kYWwgdGhpc1Q9e3RoaXN9Lz4KICAgICAgICA8L01vZGFsPgogICAgICAgIDxWaWV3IHN0eWxlPXt7IHdpZHRoOiBkZXZpY2VXaWR0aCwgYWxpZ25JdGVtczogImNlbnRlciIgfX0+CiAgICAgICAgICA8QnV0dG9uCiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHRoaXMucmVjb21tZW5kKCl9CiAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbjogMTYsIHdpZHRoOiBkZXZpY2VXaWR0aCAtIDY0IH19CiAgICAgICAgICA+CiAgICAgICAgICAgIFJlY29tbWVuZCBtZSBhIHdvcmtvdXQhCiAgICAgICAgICA8L0J1dHRvbj4KICAgICAgICA8L1ZpZXc+CiAgICAgIDwvV2F2ZUJhY2tncm91bmQ+CiAgICApOwogIH0KfQ==",
  "9": "aW1wb3J0IFJlYWN0IGZyb20gInJlYWN0IjsKaW1wb3J0IHsKICBTdHlsZVNoZWV0LAogIFZpZXcsCiAgRGltZW5zaW9ucywKICBUZXh0LAogIFZpZXdQcm9wZXJ0aWVzLAp9IGZyb20gInJlYWN0LW5hdGl2ZSI7CmltcG9ydCB7IEV2YUljb25zUGFjayB9IGZyb20gIkB1aS1raXR0ZW4vZXZhLWljb25zIjsKaW1wb3J0IHsKICBjcmVhdGVBcHBDb250YWluZXIsCiAgU2FmZUFyZWFWaWV3LAogIFRoZW1lQ29udGV4dCwKfSBmcm9tICJyZWFjdC1uYXZpZ2F0aW9uIjsKaW1wb3J0IHsgY3JlYXRlU3RhY2tOYXZpZ2F0b3IgfSBmcm9tICJyZWFjdC1uYXZpZ2F0aW9uLXN0YWNrIjsKaW1wb3J0IHsKICBBcHBsaWNhdGlvblByb3ZpZGVyLAogIEljb25SZWdpc3RyeSwKICBMYXlvdXQsCn0gZnJvbSAiQHVpLWtpdHRlbi9jb21wb25lbnRzIjsKCmxldCBkZXZpY2VIZWlnaHQgPSBEaW1lbnNpb25zLmdldCgid2luZG93IikuaGVpZ2h0OwpsZXQgZGV2aWNlV2lkdGggPSBEaW1lbnNpb25zLmdldCgid2luZG93Iikud2lkdGg7CgpleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgV2luZG93UHJvcHMgZXh0ZW5kcyBWaWV3UHJvcGVydGllcyB7CiAgd2luZG93TmFtZT86IHN0cmluZzsKICBjaGlsZHJlbj86IGFueTsKfQoKZXhwb3J0IGNsYXNzIFBoYXNlMVdpbmRvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxXaW5kb3dQcm9wcz4gewogIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHsKICAgIHN1cGVyKHByb3BzKTsKICAgIHRoaXMuc3RhdGUgPSB7fTsKICB9CgogIHJlbmRlcigpIHsKICAgIGlmICh0aGlzLnByb3BzLndpbmRvd05hbWUgPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgPFZpZXcKICAgICAgICAgIHN0eWxlPXtbCiAgICAgICAgICAgIHRoaXMucHJvcHMuc3R5bGUsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBib3JkZXJDb2xvcjogIiMzMDMwMzAiLAogICAgICAgICAgICAgIGJvcmRlclRvcFdpZHRoOiA0LAogICAgICAgICAgICAgIGJvcmRlckJvdHRvbVdpZHRoOiA0LAogICAgICAgICAgICAgIGJvcmRlckxlZnRXaWR0aDogNCwKICAgICAgICAgICAgICBib3JkZXJSaWdodFdpZHRoOiA0LAogICAgICAgICAgICB9LAogICAgICAgICAgXX0KICAgICAgICA+CiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn0KICAgICAgICA8L1ZpZXc+CiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gKAogICAgICAgIDxWaWV3CiAgICAgICAgICBzdHlsZT17WwogICAgICAgICAgICB0aGlzLnByb3BzLnN0eWxlLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICIjMzAzMDMwIiwKICAgICAgICAgICAgICBib3JkZXJUb3BXaWR0aDogMjQsCiAgICAgICAgICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IDQsCiAgICAgICAgICAgICAgYm9yZGVyTGVmdFdpZHRoOiA0LAogICAgICAgICAgICAgIGJvcmRlclJpZ2h0V2lkdGg6IDQsCiAgICAgICAgICAgIH0sCiAgICAgICAgICBdfQogICAgICAgID4KICAgICAgICAgIDxUZXh0CiAgICAgICAgICAgIHN0eWxlPXt7CiAgICAgICAgICAgICAgbWFyZ2luOiA0LAogICAgICAgICAgICAgIGNvbG9yOiAid2hpdGUiLAogICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICJOb3RvLVNhbnMiLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgIHRvcDogLTI0LAogICAgICAgICAgICAgIGxlZnQ6IC00LAogICAgICAgICAgICB9fQogICAgICAgICAgPgogICAgICAgICAgICB7dGhpcy5wcm9wcy53aW5kb3dOYW1lLnRvVXBwZXJDYXNlKCl9CiAgICAgICAgICA8L1RleHQ+CiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn0KICAgICAgICA8L1ZpZXc+CiAgICAgICk7CiAgICB9CiAgfQp9Cgpjb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7CiAgY29udGFpbmVyOiB7CiAgICBmbGV4OiAxLAogICAgYWxpZ25JdGVtczogImNlbnRlciIsCiAgICBqdXN0aWZ5Q29udGVudDogImNlbnRlciIsCiAgfSwKfSk7Cg=="
}
